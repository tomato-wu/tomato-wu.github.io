"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[586],{12:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-5384e26c",path:"/other/linuxStudy.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"第一讲，linux文件系统",slug:"第一讲-linux文件系统",children:[]},{level:2,title:"二，我的目录相关的命令：",slug:"二-我的目录相关的命令",children:[]},{level:2,title:"三， file security（文件保密）",slug:"三-file-security-文件保密",children:[]},{level:2,title:"1、权限位的含义",slug:"_1、权限位的含义",children:[]},{level:2,title:"2、基本权限命令",slug:"_2、基本权限命令",children:[]},{level:2,title:"3、数字权限",slug:"_3、数字权限",children:[]},{level:2,title:"4、修改所有者和所属组",slug:"_4、修改所有者和所属组",children:[]},{level:2,title:"5、权限含义的解释",slug:"_5、权限含义的解释",children:[]},{level:2,title:"6、umask默认权限",slug:"_6、umask默认权限",children:[]},{level:2,title:"四， file processing",slug:"四-file-processing",children:[]},{level:2,title:"1，查看文本文件的内容：",slug:"_1-查看文本文件的内容",children:[]},{level:2,title:"2，如何查看文件的大小",slug:"_2-如何查看文件的大小",children:[]},{level:2,title:"wc Linux",slug:"wc-linux",children:[]},{level:2,title:"3，如何比较两个文件的异同：",slug:"_3-如何比较两个文件的异同",children:[]},{level:2,title:"4,unip 去掉文件内部重复的行",slug:"_4-unip-去掉文件内部重复的行",children:[]},{level:2,title:"5,压缩文件：",slug:"_5-压缩文件",children:[]},{level:2,title:"6,文件查找",slug:"_6-文件查找",children:[]},{level:2,title:"(1)、按名字查找",slug:"_1-、按名字查找",children:[]},{level:2,title:"(2),按目录查找",slug:"_2-按目录查找",children:[]},{level:2,title:"7,sort  -----------对文本文件进行排序的命令",slug:"_7-sort-对文本文件进行排序的命令",children:[]},{level:2,title:"五，对文本处理的命令",slug:"五-对文本处理的命令",children:[]},{level:2,title:"7.1 cat",slug:"_7-1-cat",children:[]},{level:2,title:"7.2 cut",slug:"_7-2-cut",children:[]},{level:2,title:"7.3 正则表达式",slug:"_7-3-正则表达式",children:[]},{level:2,title:"7.4  grep",slug:"_7-4-grep",children:[]},{level:2,title:"六，sed",slug:"六-sed",children:[]},{level:2,title:"Linux禁用账号：",slug:"linux禁用账号",children:[]},{level:2,title:"七，Awk",slug:"七-awk",children:[]},{level:2,title:"八，重定向和管道",slug:"八-重定向和管道",children:[]},{level:2,title:"九，链接文件",slug:"九-链接文件",children:[]},{level:2,title:"十， Linux ps 命令",slug:"十-linux-ps-命令",children:[]},{level:2,title:"pstree(进程树)命令:",slug:"pstree-进程树-命令",children:[]},{level:2,title:"十三，系统任务有关的  top,jobs,fg,bg,kill,nohub",slug:"十三-系统任务有关的-top-jobs-fg-bg-kill-nohub",children:[]}],filePathRelative:"other/linuxStudy.md",git:{updatedTime:1641261966e3,contributors:[{name:"tomato",email:"h20333@qq.com",commits:1}]}}},5562:(s,n,a)=>{a.r(n),a.d(n,{default:()=>I});var e=a(6252);const p=(0,e.uE)('<p>@[toc]</p><h2 id="第一讲-linux文件系统" tabindex="-1"><a class="header-anchor" href="#第一讲-linux文件系统" aria-hidden="true">#</a> 第一讲，linux文件系统</h2><ol><li>普通文件（simple）：Linux对扩展名不关心，在Linux里面扩展名没有意义，能不能执行是看权限。</li><li>目录文件：相当于记录文件，记录了文件名和文件所对应的文件节点号（条目）。</li><li>链接文件：相当于window的快截方式</li><li>设备文件：保存在dev文件下，字符设备文件：键盘。鼠标等。块设备文件：硬盘，光盘等</li><li>命名管道文件(Named pipe)：命名管道（在硬盘上创建文件叫管道文件，一个进程不断写入数据，另外一个进程不断读出数据）阅后焚毁类似</li><li>插口文件(Socket)：实现进程间的通信</li></ol><p>过目录的方式将这些文件组织到一起</p><blockquote><p>bin目录：常用的命令都放到Bin目录 sbin目录:系统管理用到的命令</p></blockquote><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token operator">/</span>boot 目录 ：一个独立的分区挂载到boot目录下\n<span class="token operator">/</span>dev:     保存的是设备文件\n<span class="token operator">/</span>etc:     存放配置文件   、<span class="token operator">/</span>etc<span class="token operator">/</span>passwd   <span class="token operator">/</span>etc<span class="token operator">/</span>shadow   <span class="token operator">/</span>etc<span class="token operator">/</span>profile等等。\n<span class="token operator">/</span>home   每个用户的工作目录\n<span class="token operator">/</span>lib   用于存放程序库\n<span class="token operator">/</span>proc（虚拟目录）     存放的是系统运行的信息\n<span class="token operator">/</span>usr    类似于系统目录   相当于Windows里面的C:\\Program Files\n<span class="token operator">/</span><span class="token keyword">var</span>   存放大小容易变化的文件，日志文件\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>df 系统分区情况</strong>：df 用于查看目录分区 df 目录名 显示我所在目录的使用情况</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>df <span class="token operator">/</span>dev<span class="token operator">/</span>sda1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>df -h 以G为单位</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>查看某一个分区： df <span class="token operator">-</span>h <span class="token operator">/</span>dev<span class="token operator">/</span>sda1\ndf <span class="token operator">-</span>h <span class="token operator">/</span><span class="token keyword">var</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>du 查看当前文件的大小</strong></p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>du <span class="token operator">/</span>boot<span class="token operator">/</span>vmlinux<span class="token operator">-</span>4<span class="token punctuation">.</span>15<span class="token punctuation">.</span>0<span class="token operator">-</span>66<span class="token punctuation">.</span>txt\ndu <span class="token operator">/</span>boot\ndu <span class="token operator">-</span>s <span class="token operator">/</span>boot 不显示子目录的大小  默认以K为单位\n\ndu std<span class="token punctuation">.</span>txt 显示为 4 std<span class="token punctuation">.</span>txt 以字节为单位\ndu <span class="token operator">-</span>h std<span class="token punctuation">.</span>txt  显示为 4<span class="token punctuation">.</span>0K std<span class="token punctuation">.</span>txt  以K为单位\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="二-我的目录相关的命令" tabindex="-1"><a class="header-anchor" href="#二-我的目录相关的命令" aria-hidden="true">#</a> 二，我的目录相关的命令：</h2><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">pwd</span>  当前目录\n\n<span class="token punctuation">.</span><span class="token punctuation">.</span>  上一级目录\n\ncd 后面不跟任何东西切换回工作目录\n\nmkdir dirc 创建dirc目录 \n\nmkdir <span class="token operator">-</span>p dirc<span class="token operator">/</span>a<span class="token operator">/</span>b   创建多级目录\n\n<span class="token function">rmdir</span> dirc 删除目录，当目录为空才可以删除\n\n<span class="token function">ls</span> dira 查看dira 目录下边的目录\n\n<span class="token function">ls</span> <span class="token operator">-</span>a 显示所有隐藏文件\n\n<span class="token function">ls</span> <span class="token operator">-</span>l 列出目录下的详细信息，默认当前目录下的，后面跟文件名的时候列出该文件目录下的所有详细信息\n\n<span class="token function">rm</span> <span class="token operator">-</span>i std<span class="token punctuation">.</span>txt    <span class="token operator">-</span>i会在删除文件时询问是否删除\n\n<span class="token function">rm</span> 还可以删除目录   <span class="token function">rm</span> <span class="token operator">-</span>r dira  删除dira目录    <span class="token function">rm</span> <span class="token operator">-</span>fr dira 强制删除\n\n<span class="token function">cp</span> 拷贝 文件、目录等  <span class="token function">cp</span> <span class="token operator">-</span>r dirb dira 对dira复制\n\n<span class="token function">mv</span> 文件移动，重命名  <span class="token function">mv</span> dira dirc\n\nfile 查看文件类型 file <span class="token operator">/</span>tmp\n\ntouch  创建空文件或者修改日期 touch abc 如果abc不存在就创建abc 存在就修改最后改动的日期\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="三-file-security-文件保密" tabindex="-1"><a class="header-anchor" href="#三-file-security-文件保密" aria-hidden="true">#</a> 三， file security（文件保密）</h2><p>三个角色 <code>user(owner) ,group ,others：</code></p><h2 id="_1、权限位的含义" tabindex="-1"><a class="header-anchor" href="#_1、权限位的含义" aria-hidden="true">#</a> 1、权限位的含义</h2><p><img src="https://img-blog.csdnimg.cn/20210511194908496.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210511194914183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 第1位：表示文件类型 <img src="https://img-blog.csdnimg.cn/20210511194928687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 第2-4位：表示文件所有者(用u表示)的权限，有字母则由该权限，为-则表示没有该权限 <img src="https://img-blog.csdnimg.cn/20210511194939507.png" alt="在这里插入图片描述"> 第5-7位代表文件所属组(用g表示)的权限，同样用rwx表示</p><p>第8-10位代表其他人(用o表示)的权限，也用rwx表示</p><h2 id="_2、基本权限命令" tabindex="-1"><a class="header-anchor" href="#_2、基本权限命令" aria-hidden="true">#</a> 2、基本权限命令</h2><p>①chmod：修改文件的权限模式，命令所在路径为/bin/chmod，所有用户可执行</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>chmod <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 权限模式 文件名\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>选项：-R：递归设置权限，也就是给子目录中的所有文件设定权限 权限模式：[ugoa][+ - =][perms]，即[用户身份][赋予方式][权限]。</p><p>用户身份：<br> 赋予方式： u——所有者(user) +——加入权限 g——所属组(group) -——减去权限 o——其他人(other) =——设置权限 a——代表全部(all) 例子：</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>chmod u<span class="token operator">+</span>x cde    <span class="token operator">/</span><span class="token operator">/</span>针对cde这个文件给文件所有者<span class="token punctuation">(</span>u<span class="token punctuation">)</span>添加执行权限<span class="token punctuation">(</span>x<span class="token punctuation">)</span>\nchmod g<span class="token operator">+</span>w<span class="token punctuation">,</span>o<span class="token operator">+</span>w cde   <span class="token operator">/</span><span class="token operator">/</span>同时给多个身份添加相应权限，中间用逗号隔开\nchmod u<span class="token operator">-</span>x<span class="token punctuation">,</span>g<span class="token operator">-</span>w<span class="token punctuation">,</span>o<span class="token operator">-</span>w cde   <span class="token operator">/</span><span class="token operator">/</span>去除权限，使用减号\nchmod ugo<span class="token operator">+</span>r file1<span class="token punctuation">.</span>txt  <span class="token operator">/</span><span class="token operator">/</span>将文件 file1<span class="token punctuation">.</span>txt 设为所有人皆可读取\n\nchmod ug<span class="token operator">+</span>w<span class="token punctuation">,</span>o<span class="token operator">-</span>w file1<span class="token punctuation">.</span>txt file2<span class="token punctuation">.</span>txt  <span class="token operator">/</span><span class="token operator">/</span>将文件 file1<span class="token punctuation">.</span>txt 与 file2<span class="token punctuation">.</span>txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 :\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_3、数字权限" tabindex="-1"><a class="header-anchor" href="#_3、数字权限" aria-hidden="true">#</a> 3、数字权限</h2><p>4：同r，读. 2：同w，写. 1：同x，执行.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>chmod 755 cde   \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>755中的第一位7表示给文件所有者赋的权限为<code>4+2+1</code>，即读写执行，<code>rwx</code> 同理第二位5表示给所属组赋的权限为<code>4+1</code>，即读和执行，<code>rx</code> 最后一位则是给其他人赋予的权限,<code>rx</code> 常用数字权限： <img src="https://img-blog.csdnimg.cn/20210511201327201.png" alt="在这里插入图片描述"></p><h2 id="_4、修改所有者和所属组" tabindex="-1"><a class="header-anchor" href="#_4、修改所有者和所属组" aria-hidden="true">#</a> 4、修改所有者和所属组</h2><p>chown：修改文件和目录的所有者和所属组.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>chown <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 所有者:所属组 文件或目录\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>普通用户不能修改文件的所有者，哪怕自己是这个文件的所有者也不行；普通用户只可以修改所有者是自己的文件的权限(rwx)</p><p><strong>（1）添加用户：</strong> 添加用户的时候会创建一个同名的该用户的初始组，即同时会添加一个名为user1的group</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>useradd user1    <span class="token operator">/</span><span class="token operator">/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>（2）给新加用户设置密码：</strong></p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>passwd user1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://img-blog.csdnimg.cn/20210511201454408.png" alt="在这里插入图片描述"></p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>修改文件所有者：chown user1 cde\n修改文件和目录的所属组 chgrp user1 cde\n改回所有者和所属组：chown root:root cde\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_5、权限含义的解释" tabindex="-1"><a class="header-anchor" href="#_5、权限含义的解释" aria-hidden="true">#</a> 5、权限含义的解释</h2><p>首先，读、写、执行权限对 文件 和 目录 的作用是不同的。</p><p><strong>权限对文件的作用：</strong></p><p>读(r)：对文件有读权限，代表可以读取文件中的数据。如果把权限对应到命令上，那么一旦对文件有读权限，就可以对文件执行cat、more、less、head、tail等文件查看命令。</p><p>写(w)：对文件有写权限，代表可以修改文件中的数据。如果把权限对应到命令上，那么一旦对文件有写权限，就可以对文件执行vim、echo等修改文件数据的命令。注意：对文件有写权限并不能删除文件本身，只能修改文件中的数据；如果想删除文件，则需要对文件的上级目录拥有写权限。</p><p>执行(x)：对文件有执行权限，代表文件可以运行。在Linux中，只要文件有执行权限，这个文件就是执行文件了。只是这个文件到底能不能正确执行，不仅需要执行权限，还要看文件中的代码是不是正确。对文件来说，执行权限是最高权限。</p><p><strong>权限对目录的作用：</strong></p><p>读(r)：对目录有读权限，代表可以查看目录下的内容，也就是可以查看目录下有哪些文件和子目录。如果把权限对应到命令上，那么一旦对目录有了读权限，就可以在目录下执行ls命令，查看目录下的内容。</p><p>写(w)：对目录有写权限，代表可以修改目录下的数据，也就是可以在目录中新建、删除、复制、剪切子文件或子目录。对应到命令上，就可以在目录下执行touch、rm、cp、mv命令。对目录来说，写权限是最高权限。</p><p>执行(x)：目录是不能运行的，那么对目录拥有执行权限，代表可以进入目录。对应到命令上就是可以对目录执行cd命令，进入目录。</p><p><strong>目录的可用权限只有以下3个：</strong></p><p>0：任何权限都不赋予</p><p>5：基本的目录浏览和进入权限</p><p>7：完全权限(读+写+进人)</p><h2 id="_6、umask默认权限" tabindex="-1"><a class="header-anchor" href="#_6、umask默认权限" aria-hidden="true">#</a> 6、umask默认权限</h2><p>文件权限是linux系统中的一种安全机制，通过设置不同的权限，可以达到限制用户操作的目的，有效地保证了文件的完整性。</p><p>即新建文件时赋予文件的权限</p><p>默认的情况下，创建一个文件的权限为”<code>rw-r–r–</code>”，而创建一个目录的权限为<code>rwxr-xr-x</code>”，如果默认的不符合用户的需求，可以用<code>chmod</code>命令进行设置，但这样的效率很低。</p><p>linux提供了一个方便的工具<code>umask</code>，可以用来设置文件的默认掩码。</p><p>对于文件来说，这一数字的最 大值分别是6。系统不允许你在创建一个文本文件时就赋予它执行权限，必须在创建后用<code>chmod</code>命令增加这一权限。</p><p>目录则允许设置执行权限，这样针对目录来说，<code>umask</code>中各个数字最大可以到7。</p><p>Linux约定： 新建文件的权属是<code>-rw-rw-rw-</code>，权限值是<code>666</code> 新建目录的权属是<code>drwxrwxrwx</code>，权限值是<code>777</code></p><p>查看系统的umask权限： <code>umask</code> 用八进制数值显示umask权限： <code>umask -S</code><img src="https://img-blog.csdnimg.cn/20210511201743597.png" alt="在这里插入图片描述"> 上图表示root用户新建的文件对于root用户有rwx权限，对于所属组的其他用户有rx权限，对于其他用户有rx权限。<img src="https://img-blog.csdnimg.cn/20210511201754211.png" alt="在这里插入图片描述">  <strong>根据umask值计算新建文件或文件夹的初始权限的算法如下：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210511201807472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>一、设置文件的权限掩码，使文件自动生成默认权限为rw-rw----</strong></p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>w<span class="token operator">-</span>rw-<span class="token operator">--</span><span class="token operator">-</span>对应的数字就是660<span class="token punctuation">,</span> 其实每一位用三位2进制来表示，所以3位二进制组成十进制数就得出660<span class="token punctuation">,</span>由于要生成的文件默认权限改变，其权限掩码值为：666<span class="token operator">-</span>660=006\nlinux@server:~$ umask 006\nlinux@server:~$ touch abc\nlinux@server:~$ ll abc\n<span class="token operator">-</span>rw<span class="token operator">-</span>rw—<span class="token operator">-</span> 1 linux linux 0 2010<span class="token operator">-</span>12<span class="token operator">-</span>11 21:44 abc\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>umask 777</code> #创建文件会没有任何权限，他和chmod是相反的。 <code>umask 000</code> #具有所有权限。但文件没有x权限。</p><h2 id="四-file-processing" tabindex="-1"><a class="header-anchor" href="#四-file-processing" aria-hidden="true">#</a> 四， file processing</h2><h2 id="_1-查看文本文件的内容" tabindex="-1"><a class="header-anchor" href="#_1-查看文本文件的内容" aria-hidden="true">#</a> 1，查看文本文件的内容：</h2><p><strong>(1）more指令 —— 分页显示文件内容</strong></p><p>more指令会以一页一页的形式显示文件内容 ， 按 空白键（space） 显示下一页内容， 按 Enter键 会显示下一行内容， 按 b 键 就会往回（back）一页显示，</p><ul><li>-num 一次显示的行数</li><li>+num 从第 num 行开始显示</li></ul><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>more    file1             查看文件file1的文件内容；\nmore   <span class="token operator">-</span>num   file2    查看文件file2的内容，一次显示num行；\nmore   <span class="token operator">+</span>num   file3   查看文件file3的内容，从第num行开始显示；\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>（2） less指令 —— 可以向前或向后查看文件内容</strong></p><ul><li>less 与 more 类似，less 可以随意浏览文件，支持翻页和搜索，支持向上翻页和向下翻页。</li></ul><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>less   file1    查看文件file1的内容；\nless   <span class="token operator">-</span>m    file2     查看文件file2的内容，并在屏幕底部显示已显示内容的百分比；\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>按空格键显示下一屏的内容，按回车键显示下一行的内容；<br> 按 U 向前滚动半页，按 Y 向前滚动一行； 按[PageDown]向下翻动一页，按[PageUp]向上翻动一页； 按 Q 退出less命令；</p></blockquote><p><strong>（3）head指令 —— 查看文件开头的内容</strong></p><p>head指令用于显示文件开头的内容，默认情况下，只显示文件的头10行内容；</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>head  <span class="token operator">-</span>n  &lt;行数&gt;   filename      显示文件内容的前n行；\n例如：head   <span class="token operator">-</span>n   5   file1     显示文件file1的前5行内容\n\nhead   <span class="token operator">-</span>c  &lt;字节&gt;    filename      显示文件内容的前n个字节；\n例如：head  <span class="token operator">-</span>c  20  file2      显示文件file2的前20个字节内容\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>（4）tail指令 —— 显示文件尾部的内容</strong> ail指令用于显示文件尾部的内容，默认情况下只显示指定文件的末尾10行；</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>tail    file1      显示文件file1的尾部10行内容；\ntail  <span class="token operator">-</span>n  &lt;行数&gt;  filename    显示文件尾部的n行内容；\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>tail实时监控变化</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>例如：tail  <span class="token operator">-</span>n  5   file1    显示文件file1的末尾5行内容\n\ntail  <span class="token operator">-</span>c  &lt;字节数&gt;   filename     显示文件尾部的n个字节内容；\n例如：tail  <span class="token operator">-</span>c  20   file2    显示文件file2的末尾20个字节\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>（5） cat指令 —— 显示文件内容</strong></p><p>使用cat命令时，如果文件内容过多，则只会显示最后一屏的内容；</p><ul><li>-n 或 --number：由 1 开始对所有输出的行数编号。</li><li>-b 或 --number-nonblank：和 -n 相似，只不过对于空白行不编号。</li><li>-s 或 --squeeze-blank：当遇到有连续两行以上的空白行，就代换为一行的空白行。</li></ul><p>cat指令的基本用法：</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">cat</span>   file1        用于查看文件名为file1的文件内容；\n<span class="token function">cat</span>   <span class="token operator">-</span>n   file2       查看文件名为file2的文件内容，并从1开始对所有输出的行数（包括空行）进行编号；\n<span class="token function">cat</span>   <span class="token operator">-</span>b   file3      查看文件名为file3的文件内容，并从1开始对所有的非空行进行编号；\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_2-如何查看文件的大小" tabindex="-1"><a class="header-anchor" href="#_2-如何查看文件的大小" aria-hidden="true">#</a> 2，如何查看文件的大小</h2><ol><li>ls -l 文件实际的大小</li><li>du 用于显示给文件分配的存储空间的大小</li><li>df 命令用于显示目前在 Linux 系统上的文件系统磁盘使用情况统计。</li></ol><h2 id="wc-linux" tabindex="-1"><a class="header-anchor" href="#wc-linux" aria-hidden="true">#</a> wc Linux</h2><p>wc命令用于计算字数。利用wc指令我们可以计算文件的Byte数、字数、或是列数</p><ul><li>-c 或 –bytes 只显示bytes数</li><li>-l 或者 –lines 只显示行数</li><li>-w 或者 –words 只显示单词数</li></ul><blockquote><p>wc testfile #缺省参数将输出 指定文件的 行数、单词数、字节（符）数</p></blockquote><p>当前系统的用户信息保存在 /etc/passwd</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>wc <span class="token operator">/</span>etc<span class="token operator">/</span>passwd   得到行数等信息\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_3-如何比较两个文件的异同" tabindex="-1"><a class="header-anchor" href="#_3-如何比较两个文件的异同" aria-hidden="true">#</a> 3，如何比较两个文件的异同：</h2><p>diff + 文件名 文件名 显示文本文件的差别 1c1 c修改 6a7 a 增加 13d11 d 删除 <img src="https://img-blog.csdnimg.cn/20210511202403482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="_4-unip-去掉文件内部重复的行" tabindex="-1"><a class="header-anchor" href="#_4-unip-去掉文件内部重复的行" aria-hidden="true">#</a> 4,unip 去掉文件内部重复的行</h2><p>unip + 文件名 只能去掉连续出现的行，并不会修改文件内容，原文件还是在的，只是把去重后的结果输出到屏幕上，可以保存</p><p>-c 用于统计重复出现的行数</p><h2 id="_5-压缩文件" tabindex="-1"><a class="header-anchor" href="#_5-压缩文件" aria-hidden="true">#</a> 5,压缩文件：</h2><p>gzip hello1 gzip + 文件名，生成压缩文件，压缩文件的文件名是在原来的文件加后缀.gz gzip -d hello.gz 文件经过gzip压缩后，文件会多出一个 .gz后缀。 <img src="https://img-blog.csdnimg.cn/20210511202442312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>bzip2是比gzip更优秀的压缩方法，以bz2结尾。用法同gzip。</strong></p><h2 id="_6-文件查找" tabindex="-1"><a class="header-anchor" href="#_6-文件查找" aria-hidden="true">#</a> 6,文件查找</h2>',103),l={href:"https://blog.csdn.net/l_liangkk/article/details/81294260",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("https://blog.csdn.net/l_liangkk/article/details/81294260"),r=(0,e.uE)('<blockquote><p>Linux find 命令用来在指定目录下查找文件,如果使用该命令时，不设置任何参数，则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p></blockquote><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>语法：\nfind   path   <span class="token operator">-</span>option   <span class="token punctuation">[</span>   <span class="token operator">-</span>print <span class="token punctuation">]</span>   <span class="token punctuation">[</span> <span class="token operator">-</span>exec   <span class="token operator">-</span>ok   command <span class="token punctuation">]</span>   <span class="token punctuation">{</span><span class="token punctuation">}</span> \\<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>实例： 将当前目录及其子目录下所有文件后缀为 .c 的文件列出来:</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>find <span class="token punctuation">.</span> <span class="token operator">-</span>name <span class="token string">&quot;*.c&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>通过find命令查找</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>按文件名进行查找：find <span class="token punctuation">.</span> <span class="token operator">-</span>name <span class="token string">&#39;hello*&#39;</span>   查找我hello文件开头的文件\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_1-、按名字查找" tabindex="-1"><a class="header-anchor" href="#_1-、按名字查找" aria-hidden="true">#</a> (1)、按名字查找</h2><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code> 在当前目录及子目录中，查找大写字母开头的txt文件  \nfind <span class="token punctuation">.</span> <span class="token operator">-</span>name <span class="token string">&#39;[A-Z]*.txt&#39;</span> <span class="token operator">-</span>print \n\n在<span class="token operator">/</span>etc及其子目录中，查找host开头的文件 \n      find <span class="token operator">/</span>etc <span class="token operator">-</span>name <span class="token string">&#39;host*&#39;</span> <span class="token operator">-</span>print   \n\n      在<span class="token variable">$HOME</span>目录及其子目录中，查找所有文件   \n      find ~ <span class="token operator">-</span>name <span class="token string">&#39;*&#39;</span> <span class="token operator">-</span>print \n\n      在当前目录及子目录中，查找不是out开头的txt文件   \n      find <span class="token punctuation">.</span> <span class="token operator">-</span>name <span class="token string">&quot;out*&quot;</span> <span class="token operator">-</span>prune <span class="token operator">-</span>o <span class="token operator">-</span>name <span class="token string">&quot;*.txt&quot;</span> <span class="token operator">-</span>print \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_2-按目录查找" tabindex="-1"><a class="header-anchor" href="#_2-按目录查找" aria-hidden="true">#</a> (2),按目录查找</h2><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>在当前目录除aa之外的子目录内搜索 txt文件   \n      find <span class="token punctuation">.</span> <span class="token operator">-</span>path <span class="token string">&quot;./aa&quot;</span> <span class="token operator">-</span>prune <span class="token operator">-</span>o <span class="token operator">-</span>name <span class="token string">&quot;*.txt&quot;</span> <span class="token operator">-</span>print   \n\n  在当前目录及除aa和bb之外的子目录中查找txt文件   \n      find <span class="token punctuation">.</span> −path′<span class="token punctuation">.</span><span class="token operator">/</span>dir0′−o−path′<span class="token punctuation">.</span><span class="token operator">/</span>dir1′−path′<span class="token punctuation">.</span><span class="token operator">/</span>dir0′−o−path′<span class="token punctuation">.</span><span class="token operator">/</span>dir1′ <span class="token operator">-</span>a <span class="token operator">-</span>prune <span class="token operator">-</span>o <span class="token operator">-</span>name <span class="token string">&#39;*.txt&#39;</span> <span class="token operator">-</span>print\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_7-sort-对文本文件进行排序的命令" tabindex="-1"><a class="header-anchor" href="#_7-sort-对文本文件进行排序的命令" aria-hidden="true">#</a> 7,sort -----------对文本文件进行排序的命令</h2><p>Linux sort命令用于将文本文件内容加以排序。 参数说明：</p><ul><li>-b 忽略每行前面开始出的空格字符。</li><li>-c 检查文件是否已经按照顺序排序。</li><li>-d 排序时，处理英文字母、数字及空格字符外，忽略其他的字符。</li><li>-f 排序时，将小写字母视为大写字母。</li><li>-i 排序时，除了040至176之间的ASCII字符外，忽略其他的字符。</li><li>-m 将几个排序好的文件进行合并。</li><li>-M 将前面3个字母依照月份的缩写进行排序。</li><li>-n 依照数值的大小排序。</li><li>-u 意味着是唯一的(unique)，输出的结果是去完重了的。</li><li>-o&lt;输出文件&gt; 将排序后的结果存入指定的文件。</li><li>-r 以相反的顺序来排序。</li><li>-t&lt;分隔字符&gt; 指定排序时所用的栏位分隔字符。</li><li>+&lt;起始栏位&gt;-&lt;结束栏位&gt; 以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。</li><li>--help 显示帮助。</li><li>--version 显示版本信息。</li></ul>',13),t=(0,e.Uk)("sort + 文件名 从小到大按照字典排序 sort -k sort -k -m "),c={href:"https://www.jianshu.com/p/c4d159a98dd8",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("https://www.jianshu.com/p/c4d159a98dd8"),u=(0,e.Uk)(" 设定黏着位： 如果不为目录设置粘滞位，任何具有该目录写和执行权限的用户都可以删除和移 动其中的文件。实 不能删除别人的文件 除非你是超级用户"),d=(0,e.uE)('<h2 id="五-对文本处理的命令" tabindex="-1"><a class="header-anchor" href="#五-对文本处理的命令" aria-hidden="true">#</a> 五，对文本处理的命令</h2><h2 id="_7-1-cat" tabindex="-1"><a class="header-anchor" href="#_7-1-cat" aria-hidden="true">#</a> 7.1 cat</h2><p>cat 是一个文本文件查看和连接工具。查看一个文件的内容，用cat比较简单，就是cat 后面直接接文件名，如cat linuxyw.txt</p><p><img src="https://img-blog.csdnimg.cn/20210511202726557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 把 textfile1 的文档内容加上行号后输入 textfile2 这个文档里：</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">cat</span> <span class="token operator">-</span>n textfile1 &gt; textfile2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>把 textfile1 和 textfile2 的文档内容加上行号（空白行不加）之后将内容附加到 textfile3 文档里：</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">cat</span> <span class="token operator">-</span>b textfile1 textfile2 &gt;&gt; textfile3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>清空 /etc/test.txt 文档内容：</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">cat</span> <span class="token operator">/</span>dev<span class="token operator">/</span>null &gt; <span class="token operator">/</span>etc<span class="token operator">/</span>test<span class="token punctuation">.</span>txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>cat 也可以用来制作镜像文件。例如要制作软盘的镜像文件，将软盘放好后输入：</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">cat</span> <span class="token operator">/</span>dev<span class="token operator">/</span>fd0 &gt; OUTFILE\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>相反的，如果想把 image file 写到软盘，输入：</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">cat</span> IMG_FILE &gt; <span class="token operator">/</span>dev<span class="token operator">/</span>fd0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_7-2-cut" tabindex="-1"><a class="header-anchor" href="#_7-2-cut" aria-hidden="true">#</a> 7.2 cut</h2><p>Linux cut命令用于显示每行从开头算起 num1 到 num2 的文字。</p><h2 id="_7-3-正则表达式" tabindex="-1"><a class="header-anchor" href="#_7-3-正则表达式" aria-hidden="true">#</a> 7.3 正则表达式</h2>',16),b={href:"https://www.bilibili.com/video/BV1ef4y1U7V4?from=search&seid=12573741382167678317",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("https://www.bilibili.com/video/BV1ef4y1U7V4?from=search&seid=12573741382167678317"),g=(0,e._)("img",{src:"https://img-blog.csdnimg.cn/20210511202826493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"},null,-1),k=(0,e._)("img",{src:"https://img-blog.csdnimg.cn/20210511202831884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"},null,-1),h=(0,e._)("img",{src:"https://img-blog.csdnimg.cn/20210511202839124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"},null,-1),w=(0,e.uE)('<h2 id="_7-4-grep" tabindex="-1"><a class="header-anchor" href="#_7-4-grep" aria-hidden="true">#</a> 7.4 grep</h2><blockquote><p>Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。</p></blockquote><p><strong>（1）grep --help可查看</strong></p><ol><li>-c 只输出匹配行的计数。</li><li>-i 不区分大小写（只适用于单字符）。</li><li>-h 查询多文件时不显示文件名。</li><li>-l 查询多文件时只输出包含匹配字符的文件名。</li><li>-n 显示匹配行及行号。</li><li>-s 不显示不存在或无匹配文本的错误信息。</li><li>-v 显示不包含匹配文本的所有行。</li><li>-q 不显示存在或者匹配的文本信息</li><li>-f 后接文件名，以文件中的每一行作为匹配项</li><li>-R 递归查询当前目录下的文件</li><li>-w 匹配单词</li><li>-o 只输出匹配字符串</li><li>-A 输出匹配行的后n行，后带数字，如-A 2</li><li>-B 输出匹配行的前n行，后带数字，如-B 2</li><li>-C 输出匹配行的前后n行，后带数字，如-C 2</li></ol><p><strong>（2）grep命令使用简单实例</strong></p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>将<span class="token operator">/</span>etc<span class="token operator">/</span>passwd，有出现 root 的行取出来\n<span class="token comment"># grep root /etc/passwd</span>\nroot:x:0:0:root:<span class="token operator">/</span>root:<span class="token operator">/</span>bin<span class="token operator">/</span>bash\noperator:x:11:0:operator:<span class="token operator">/</span>root:<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin\n\n\n2<span class="token punctuation">.</span>将<span class="token operator">/</span>etc<span class="token operator">/</span>passwd，有出现 root 的行取出来<span class="token punctuation">,</span>同时显示这些行在<span class="token operator">/</span>etc<span class="token operator">/</span>passwd的行号\n<span class="token comment"># grep -n root /etc/passwd</span>\n1:root:x:0:0:root:<span class="token operator">/</span>root:<span class="token operator">/</span>bin<span class="token operator">/</span>bash\n30:operator:x:11:0:operator:<span class="token operator">/</span>root:<span class="token operator">/</span>sbin<span class="token operator">/</span>nologin\n\n\n3<span class="token punctuation">.</span>将<span class="token operator">/</span>etc<span class="token operator">/</span>passwd，将没有出现 root 的行取出来\n<span class="token comment"># grep -v root /etc/passwd</span>\n\n\n4<span class="token punctuation">.</span>将<span class="token operator">/</span>etc<span class="token operator">/</span>passwd，将没有出现 root 和nologin的行取出来\n<span class="token comment"># grep -v root /etc/passwd | grep -v nologin</span>\n\n<span class="token operator">-</span>w 或 <span class="token operator">--</span>word<span class="token operator">-</span>regexp : 只显示符合的列。\ngrep <span class="token operator">-</span>w <span class="token string">&#39;CS&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>student \n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p><img src="https://img-blog.csdnimg.cn/20210511203124541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 练习： <img src="https://img-blog.csdnimg.cn/20210517232957455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210517233014338.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210517233025114.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210517233035579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2021051723304776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="六-sed" tabindex="-1"><a class="header-anchor" href="#六-sed" aria-hidden="true">#</a> 六，sed</h2><p>sed（Stream Editor）：文本流编辑，sed是一个“非交互式的”面向字符流的编辑器。</p><p>能同时处理多个文件多行的内容，可以不对原文件改动，把整个文件输入到屏幕,也可以把只匹配到模式的内容输入到屏幕上。并不会修改原先的文件，只会把修改后的文件输出到屏幕</p>',10),v={href:"https://www.runoob.com/linux/linux-comm-sed.html%20https://www.cnblogs.com/ctaixw/p/5860221.html",target:"_blank",rel:"noopener noreferrer"},x=(0,e.Uk)("https://www.runoob.com/linux/linux-comm-sed.html https://www.cnblogs.com/ctaixw/p/5860221.html"),f=(0,e.uE)('<p><strong>sed命令的语法格式：</strong></p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed的命令格式： sed <span class="token namespace">[option]</span> <span class="token string">&#39;sed command&#39;</span>filename\n\nsed的脚本格式：sed <span class="token namespace">[option]</span> <span class="token operator">-</span>f <span class="token string">&#39;sed script&#39;</span>filename\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>sed命令的选项(option)：</strong></p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token operator">-</span>n ：只打印模式匹配的行\n<span class="token operator">-</span>e ：直接在命令行模式上进行sed动作编辑，此为默认选项\n<span class="token operator">-</span>f ：将sed的动作写在一个文件内，用–f filename 执行filename内的sed动作\n<span class="token operator">-</span>r ：支持扩展表达式\n<span class="token operator">-</span>i ：直接修改文件内容\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>实例： <strong>（1）以行为单位的新增/删除</strong></p><p>将 /tmp/student 的内容列出并且列印行号，同时，请将第 2~5 行删除！</p><p>d 就是 delete 命令</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed <span class="token string">&#39;2,5d&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>student \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>只要删除第 2 行</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed <span class="token string">&#39;2d&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>student \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>（2）替换</strong></p><p>数据的搜寻并替换 除了整行的处理模式之外， sed 还可以用行为单位进行部分数据的搜寻并取代。基本上 sed 的搜寻与替代的与 vi 相当的类似！他有点像这样：</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed <span class="token string">&#39;s/要被取代的字串/新的字串/&#39;</span>\n<span class="token operator">--</span>例子<span class="token operator">--</span>  sed <span class="token string">&#39;s/\\&lt;CS/EECS/&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>student \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>把分数替换成* 原形式：3.54 正则表达式：&#39;[0-9]<em>[.][0-9]</em>&#39;</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed <span class="token string">&#39;s/[0-9]*[.][0-9]*/***/&#39;</span> filename\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其中【.】可以用 . 表示</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed <span class="token string">&#39;s/[0-9]*\\.[0-9]*/***/&#39;</span> filename\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>有多少个字符就替换多少个* 默认替换第一个匹配到的字符，加上g表示符合条件的都替换</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed <span class="token string">&#39;s/[0-9\\.]/*/g&#39;</span> filename\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>（3）其他</strong></p><ol><li>p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</li><li>-n或--quiet或--silent 仅显示script处理后的结果。</li><li>加n不再默认输出缓冲区内容</li><li>a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)</li></ol><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>   sed <span class="token string">&#39;\\CS/a niubi&#39;</span> filename\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed <span class="token string">&#39;s/,/#/g&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>grade<span class="token punctuation">.</span>csv   <span class="token operator">/</span><span class="token operator">/</span>将所有的，换成<span class="token comment">#   /g的意思是碰到就换</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</p><h2 id="linux禁用账号" tabindex="-1"><a class="header-anchor" href="#linux禁用账号" aria-hidden="true">#</a> Linux禁用账号：</h2><p>（1）在每个用户前面加一个#号 （2）不让用户登录，把用户shell程序字段换成乱七八招的东西 <img src="https://img-blog.csdnimg.cn/20210511203631488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>vi <span class="token operator">/</span>etc<span class="token operator">/</span>passwd\nsed <span class="token string">&#39;s/:.*$/:\\/bin\\/nologin/&#39;</span> <span class="token operator">/</span>etc<span class="token operator">/</span>passwd 或者\nsed <span class="token string">&#39;s/:.*$/***/&#39;</span> <span class="token operator">/</span>etc<span class="token operator">/</span>passwd\n替换结尾不是：的若干个字符\nsudo sed <span class="token operator">-</span>i <span class="token string">&#39;s/[^:]*$/***/&#39;</span> <span class="token operator">/</span>etc<span class="token operator">/</span>passwd\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>实例练习： With sed(/tmp/databook). <img src="https://img-blog.csdnimg.cn/20210511203712568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> Change Jon&#39;s name to Joanthan</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed <span class="token string">&#39;s/^Jon/Joanthan/&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>databook\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Delete the first three lines</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed <span class="token string">&#39;1,2,3d&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>databook\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Print lines 5 through 10 (-n ：只打印模式匹配的行)</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed <span class="token operator">-</span>n <span class="token string">&#39;5,10p&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>databook\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Delete lines containing Lane</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed <span class="token string">&#39;/Lane/d&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>databook\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Print all lines where the birthdays are in November or December -n不输出不匹配的行</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed <span class="token operator">-</span>n <span class="token string">&#39;/:[1][1-2]\\//p&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>databook\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Replace the line containing Jose with JOSE HAS RETIRED. 替换掉包含jose的行</p><p>.*匹配任意多的任意字符</p><p>.<em>Jose.</em> 匹配一整行</p><p>s代表替换</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed <span class="token operator">-</span>n <span class="token string">&#39;s/.*Jose.*/JOSE HAS RETIRED/&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>databook\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Change Popeye&#39;s birthday to 11/14/46</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed <span class="token string">&#39;/^Popeye/s/[0-9]*\\/[0-9]*\\/[0-9]*/11\\/14\\/46/&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>databook  或者\nsed <span class="token string">&#39;/Popeye/s/[0-9]*\\/[0-9]*\\/[0-9]*/11\\/14\\/46/&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>databook\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>/^Popeye/ 查找以Popeye开头的行</p><p>/:[0-9]<em>/[0-9]</em>/[0-9]*/ 匹配 生日字段 :3/19/35</p><p>s/????/:11/14/46/ 将生日字段替换成 :11/14/46</p><p>Delete all blank lines</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed <span class="token string">&#39;/^[ \\t]*$/d&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>databook\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>开头和结尾之间没有任何字符(空格和换行符都没有)</p><h2 id="七-awk" tabindex="-1"><a class="header-anchor" href="#七-awk" aria-hidden="true">#</a> 七，Awk</h2><p>AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。 依次对每一行进行处理，然后输出 $0 表示整个当前行 $1 每行第一个字段</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk ‘pattern<span class="token string">&#39; filename\nawk &#39;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>action<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token string">&#39; filename\nawk &#39;</span>pattern<span class="token punctuation">{</span>action<span class="token punctuation">}</span>&#39; filenme\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令</p><p>每行按空格或TAB分割，输出文本中的1、4项</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token string">&#39;{print $1,$4}&#39;</span> log<span class="token punctuation">.</span>txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>每行按 : 分割，输出文本中的1、4项</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code> awk <span class="token operator">-</span>f: <span class="token string">&#39;print $1,$2&#39;</span> filename\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>大写字母J开头的行</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token string">&#39;/^J/{print $1,$2}&#39;</span> filename\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>绩点大于三点五的</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token string">&#39;$4&gt;3.5{print $1,$2}&#39;</span> filename\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>CS的：</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token string">&#39;$3==&quot;CS&quot;{print $1,$2}&#39;</span> filename\nawk <span class="token string">&#39;$3==&quot;CS&quot; &amp;&amp; $4&gt;4{print $1,$2}&#39;</span> filename\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>以D开头的：</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token string">&#39;$2~/^D/{print $1,$2} &#39;</span> filename\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>第三个字段包含CA，以：为分隔符</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk  <span class="token operator">-</span>f: <span class="token string">&#39;$3~/!CA/{print $1,$2}&#39;</span> filename\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://img-blog.csdnimg.cn/20210511203938326.png" alt="在这里插入图片描述"> 找出2,3,4字段平均起来大于70的行</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token string">&#39;($2+$3+$4)/3&gt;70{print $0,{$2+$3+$4}($2+$3+$4)/3}&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>score\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>~匹配 $1!~/bash/</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token operator">-</span>F: <span class="token string">&#39;$7!=&#39;</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash<span class="token string">&#39; &amp;&amp; $1~/^s19/&#39;</span> filename\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>NR 变量 行号 输出文件的第二行到第四行</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>sed <span class="token operator">-</span>n <span class="token string">&#39;2,4p&#39;</span> filename \n或者\nawk <span class="token string">&#39;NR&gt;=2 &amp;&amp; NR &lt;=4&#39;</span> filename\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">cat</span> <span class="token operator">-</span>n filename\nawk <span class="token string">&#39;{print NR,$0}&#39;</span> filename\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>练习实例： With awk(/tmp/donors): contains the names, phone numbers, and money contributions to the party campaign for the past three months <img src="https://img-blog.csdnimg.cn/20210511204023468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> head -3 /temp/donors 查看文件长什么样 Print all the phone numbers</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code> awk <span class="token operator">-</span>F:<span class="token string">&#39;{print $2}&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>-F:定义:为分隔符，打印第二个字段<br> Print Dan&#39;s phone number</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token operator">-</span>F: <span class="token string">&#39;/Dan/{print $2}&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Print Susan&#39;s name and phone number</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token operator">-</span>F: <span class="token string">&#39;/Susan/{print $1,$2}&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Print all last names beginning with D</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token operator">-</span>F<span class="token string">&#39;[: ]&#39;</span> <span class="token string">&#39;$2~^/D[a-z]*/{print $0}&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>以冒号和空格为分隔符 第二个字段去匹配以D开头的 用 / ? / 把正则表达式包括起来 Print all first names beginning with either a C or E.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token string">&#39;$1 ~ /^[CE]/ {print $1}&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Print all first names containing only four characters.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token string">&#39;/^[a-zA-Z]{4} /{print $1}&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>/^....$/ /^.{4}/ 开头和结尾之间只包含4个字符</p><p>Print the first names of all those in the 916 area code.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token string">&#39;$2~/916/{print $1}&#39;</span>  <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Print Main’s campaign contributions. Each value should be printed with a leading dollar sign; e.g., $250 $100 $175.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token operator">-</span>F: <span class="token string">&#39;/[a-zA-Z]* Man/{print &quot;$&quot;$3,&quot;$&quot;$4,&quot;$&quot;$5}&#39;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Print second name followed with a comma and first name</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token operator">-</span>F <span class="token string">&#39;[ :]&#39;</span> <span class="token string">&#39;{print $2&quot;, &quot;$1}&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Print the first and last names of those who contributed more than $100 in the second month.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token operator">-</span>F <span class="token string">&#39;[ :]&#39;</span> <span class="token string">&#39;$6&gt;100{print $1, $2}&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\nawk <span class="token operator">-</span>F: <span class="token variable">$4</span>&gt;100<span class="token punctuation">{</span>print <span class="token variable">$1</span><span class="token punctuation">}</span>&#39; <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Print the names and phone numbers of those who contributed less than $85 in the last month.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token operator">-</span>F <span class="token string">&#39;[ :]&#39;</span> <span class="token string">&#39;$7&lt;85{print $1&quot; &quot;$2, &quot;phone-number:&quot;$4}&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\nawk <span class="token operator">-</span>F: <span class="token variable">$4</span>&lt;85<span class="token punctuation">{</span>print <span class="token variable">$1</span><span class="token punctuation">,</span><span class="token variable">$2</span><span class="token punctuation">}</span>&#39; <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Print the names of those who contributed between $75 and $150 in the first month.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token operator">-</span>F <span class="token string">&#39;[ :]&#39;</span> <span class="token string">&#39;$5&gt;=75&amp;&amp;$5&lt;=150{print $1&quot; &quot;$2;}&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\nawk <span class="token operator">-</span>F: <span class="token variable">$5</span>&gt;=75&amp;&amp;<span class="token variable">$5</span>&lt;=150<span class="token punctuation">{</span>print <span class="token variable">$1</span><span class="token punctuation">}</span>&#39; <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Print the names of those who contributed less than $800 over the three-month period.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token operator">-</span>F: <span class="token string">&#39;($5+$6+$7)&lt;800{print $1}&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Print the names and addresses of those with an average monthly contribution greater than $200.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token operator">-</span>F<span class="token string">&#39;[:(]&#39;</span>: <span class="token string">&#39;($3+$4+$5)/3&gt;200{print $1,$2}&#39;</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Print the first name of those not in the 916 area code.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token string">&#39;$2!~/916/{print $1}&#39;</span>  <span class="token operator">/</span>tmp<span class="token operator">/</span>donors\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>第二个字段不包含916</p><p>Print each record preceded by the number of the record.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token string">&#39;{print NR，$0}&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>NR表示行号 Print the name and total contribution of each person.</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>awk <span class="token operator">-</span>F: <span class="token string">&#39;{print $1,$3+$4+$5}&#39;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="八-重定向和管道" tabindex="-1"><a class="header-anchor" href="#八-重定向和管道" aria-hidden="true">#</a> 八，重定向和管道</h2>',112),_=(0,e._)("strong",null,"（一）重定向",-1),F={href:"https://www.cnblogs.com/softidea/p/3965093.html",target:"_blank",rel:"noopener noreferrer"},G=(0,e.Uk)("https://www.cnblogs.com/softidea/p/3965093.html"),N=(0,e.Uk)(" 标准输入重定向：把标准输入和一个文件相关联"),$=(0,e.uE)('<div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>   command&lt;文件名\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>标准输出重定向：把标准输出和一个文件相关联</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>   command&gt;文件名<span class="token punctuation">(</span>覆盖）\n   command&gt;&gt;文件名<span class="token punctuation">(</span>增加）\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>标准重定向标准错误:为了重定向标准错误，可以指定文件描述符2。</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">ls</span> <span class="token operator">-</span>l <span class="token operator">/</span>etc<span class="token operator">/</span>password 2&gt; result\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>grep命令没有找到该文件，缺省地向终端输出了一个错误信息。现在让我们把错误重定向到文件/dev/null中(实际就上是系统的垃圾箱)：</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>$ grep <span class="token string">&quot;trident&quot;</span> missiles 2&gt;<span class="token operator">/</span>dev<span class="token operator">/</span>null\n这样所有的错误输出都输送到了<span class="token operator">/</span>dev<span class="token operator">/</span>null，不再出现在屏幕上。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>（二）管道</strong> 用于将两个命令结合到一起，用“|”表示</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>who<span class="token punctuation">|</span>wc <span class="token operator">-</span>l\n将who命令的结果输送到wc <span class="token operator">-</span>l命令\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>who <span class="token punctuation">|</span> grep <span class="token string">&#39;^s19&#39;</span> <span class="token punctuation">|</span>grep <span class="token string">&#39;192.168.207&#39;</span><span class="token punctuation">|</span>awk <span class="token string">&#39;{print $1}&#39;</span><span class="token punctuation">|</span><span class="token function">sort</span><span class="token punctuation">|</span>uniq<span class="token punctuation">|</span>wc <span class="token operator">-</span>l\n\ngrep <span class="token operator">-</span>v <span class="token string">&#39;192.168.207&#39;</span> \n<span class="token operator">-</span>v表示非\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>作业：</strong></p><p>（1）并以下文件中的数据(按此顺序)并将其附加到all。LABS文件:lab1、lab2、lab3、lab4。 任何错误都应该重定向到error.log文件。显示您的会话。</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>合并两个文件：\n <span class="token function">cat</span> lab1 lab2 lab3 lab4 &gt;all 或者 <span class="token function">cat</span> lab<span class="token punctuation">[</span>1<span class="token operator">-</span>4<span class="token punctuation">]</span> &gt; all\n 任何错误都应该重定向到error<span class="token punctuation">.</span>log文件:\n <span class="token function">cat</span> lab1 lab2 lab3 lab4 &gt;all 2&gt;error<span class="token punctuation">.</span>log\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>（2）使用命令行以GPA降序显示前五名学生的文件Student_record中的记录，即，最先显示GPA最高的学生记录。</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">sort</span> <span class="token operator">-</span>k4 <span class="token operator">-</span>n <span class="token operator">-</span>r student_record <span class="token punctuation">|</span> head <span class="token operator">-</span>n 5\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>sort命令中各个参数表示什么意思? (1) -k -k1表示按第一个字段排序，-k2表示按第二个字段排序 -k1 -k2 表示先按k1，若k1相同再按k2排序 (2) -n 依照数值的大小排序。 (3) -r 以相反的顺序来排序。 (4) -t 定义分隔符</p></blockquote><p><strong>（三）重定向和管道组合在一起</strong></p><p>who 查看有谁登录了 who | wc -l 输出行数 tee 把结果重定向到指定文件</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>who <span class="token punctuation">|</span> <span class="token function">tee</span> filename <span class="token punctuation">|</span> wc <span class="token operator">-</span>l\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>把who命令的结果分成两份，一份标准输出，一本重定向到filenname</p></blockquote><h2 id="九-链接文件" tabindex="-1"><a class="header-anchor" href="#九-链接文件" aria-hidden="true">#</a> 九，链接文件</h2><p>Linux ln（英文全拼：link files）命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。</p><blockquote><p>当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p></blockquote><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>ln <span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span class="token punctuation">[</span>源文件或目录<span class="token punctuation">]</span><span class="token punctuation">[</span>目标文件或目录<span class="token punctuation">]</span>\n参数： <span class="token operator">-</span>f 强制创建\n      <span class="token operator">-</span>s 软链接<span class="token punctuation">(</span>符号链接<span class="token punctuation">)</span>\n      <span class="token operator">-</span>i 交互模式，文件存在则提示用户是否覆盖\n      <span class="token operator">-</span>b 删除，覆盖以前建立的链接\n      <span class="token operator">-</span>d 允许超级用户制作目录的硬链接\n      <span class="token operator">-</span>i 交互模式，文件存在则提示用户是否覆盖\n      <span class="token operator">-</span>n 把符号链接视为一般目录\n      <span class="token operator">-</span>v 显示详细的处理过程\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>平时使用感觉就像桌面应用上的快捷图标一样 比如你安装的<code>nginx</code>文件在<code>usr/local/nginx/sbin/nignx</code>，可以在<code>usr/local/bin</code>中建立一个<code>nginx</code>的软连接，这样每次就可以全局访问了。</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>/<span class="token operator">/</span> 给nginx建立一个可以全局访问的软连接\nln <span class="token operator">-</span>s <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>nginx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>软链接：软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。</p><ol><li>软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</li><li>软链接可以 跨文件系统 ，硬链接不可以</li><li>软链接可以对一个不存在的文件名进行链接</li><li>软链接可以对目录进行链接</li></ol><p>硬链接：硬链接的意思是一个档案可以有多个名称</p><ol><li>硬链接，以文件副本的形式存在。但不占用实际空间。</li><li>不允许给目录创建硬链接</li><li>硬链接只有在同一个文件系统中才能创建,不能横跨系统。</li><li>源文件删除还能通过硬链接访问文件</li></ol><blockquote><p>硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。</p></blockquote><h2 id="十-linux-ps-命令" tabindex="-1"><a class="header-anchor" href="#十-linux-ps-命令" aria-hidden="true">#</a> 十， Linux ps 命令</h2><pre><code>Linux中的ps命令是Process Status的缩写。ps命令用来列出系统中当前运行的那些进程。ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程，如果想要动态的显示进程信息，就可以使用top命令。\t\n</code></pre><blockquote><p>类似于 windows 的任务管理器。</p></blockquote><p><strong>linux上进程有5种状态:</strong></p><ul><li>运行(正在运行或在运行队列中等待)</li><li>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</li><li>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</li><li>僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</li><li>停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)</li></ul><p><strong>ps工具标识进程的5种状态码:</strong></p><ul><li><p>D 不可中断 uninterruptible sleep (usually IO)</p></li><li><p>R 运行 runnable (on run queue)</p></li><li><p>S 中断 sleeping</p></li><li><p>T 停止 traced or stopped</p></li><li><p>Z 僵死 a defunct (”zombie”) process</p></li></ul><p>语法：</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">ps</span><span class="token punctuation">[</span>参数<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>命令参数：</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>a  显示所有进程\n\t<span class="token operator">-</span>a 显示同一终端下的所有程序\n\t\n\t<span class="token operator">-</span>A 或者 <span class="token operator">-</span>e 显示所有进程\n\n\tc  显示进程的真实名称\n\t<span class="token operator">-</span>N 反向选择\n\te  显示环境变量\n\tf  显示程序间的关系\n\t<span class="token operator">-</span>H 显示树状结构\n\tr  显示当前终端的进程\n\tT  显示当前终端的所有程序\n\tu  指定用户的所有进程\n\t<span class="token operator">-</span>au 显示较详细的资讯\n\t<span class="token operator">-</span>aux 显示所有包含其他使用者的行程 \n\t<span class="token operator">-</span>C&lt;命令&gt; 列出指定命令的状况\n\t<span class="token operator">--</span>lines&lt;行数&gt; 每页显示的行数\n\t<span class="token operator">--</span>width&lt;字符数&gt; 每页显示的字符数\n\t<span class="token operator">--</span>help 显示帮助信息\n\t<span class="token operator">--</span>version 显示版本显示\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>例：</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">ps</span> <span class="token operator">-</span>A\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code> <span class="token function">ps</span> <span class="token operator">-</span>e <span class="token punctuation">|</span> grep <span class="token string">&#39;nginx&#39;</span> <span class="token punctuation">|</span> wc <span class="token operator">-</span>l\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://img-blog.csdnimg.cn/20210527110812996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 显示指定用户信息</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">ps</span> <span class="token operator">-</span>u root\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://img-blog.csdnimg.cn/20210527110837946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>nice <span class="token operator">-</span>n 10 <span class="token punctuation">|</span> <span class="token function">ps</span> <span class="token operator">-</span>l\n设置优先级\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://img-blog.csdnimg.cn/20210527110859578.png" alt="在这里插入图片描述"></p><h2 id="pstree-进程树-命令" tabindex="-1"><a class="header-anchor" href="#pstree-进程树-命令" aria-hidden="true">#</a> pstree(进程树)命令:</h2><blockquote><p>Linux pstree命令将所有行程以树状图显示，树状图将会以 pid (如果有指定) 或是以 init 这个基本行程为根 (root)，如果有指定使用者 id，则树状图会只显示该使用者所拥有的行程。</p></blockquote><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>pstree <span class="token operator">-</span>V\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>参数说明： -a 显示该行程的完整指令及参数, 如果是被记忆体置换出去的行程则会加上括号 -c 如果有重覆的行程名, 则分开列出（预设值是会在前面加上 *）</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>pstree <span class="token operator">-</span>u <span class="token operator">/</span><span class="token operator">/</span>显示用户名称\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="十三-系统任务有关的-top-jobs-fg-bg-kill-nohub" tabindex="-1"><a class="header-anchor" href="#十三-系统任务有关的-top-jobs-fg-bg-kill-nohub" aria-hidden="true">#</a> 十三，系统任务有关的 top,jobs,fg,bg,kill,nohub</h2><p><strong>(1)top命令</strong> top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。 经常用来监控linux的系统状况，比如cpu、内存的使用 <img src="https://img-blog.csdnimg.cn/20210603102628233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 第一行，任务队列信息，同 uptime 命令的执行结果 第二行，Tasks — 任务（进程） 第三行，cpu状态信息 第四行,内存状态 第五行，swap交换分区信息 第六行，空行 第七行以下：各进程（任务）的状态监控</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>PID — 进程id\nUSER — 进程所有者\nPR — 进程优先级\n<span class="token function">NI</span> — nice值。负值表示高优先级，正值表示低优先级\nVIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP<span class="token operator">+</span>RES\nRES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE<span class="token operator">+</span><span class="token keyword">DATA</span>\nSHR — 共享内存大小，单位kb\nS —进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪<span class="token operator">/</span>停止 Z=僵尸进程\n<span class="token operator">%</span>CPU — 上次更新到现在的CPU时间占用百分比\n<span class="token operator">%</span>MEM — 进程使用的物理内存百分比\nTIME<span class="token operator">+</span> — 进程使用的CPU时间总计，单位1<span class="token operator">/</span>100秒\nCOMMAND — 进程名称（命令名<span class="token operator">/</span>命令行）\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>(2）&amp; 放在命令后面表示设置此进程为后台进程</strong> 加在一个命令的最后，可以把这个命令放到后台执行，如</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>watch  <span class="token operator">-</span>n 10 sh  test<span class="token punctuation">.</span>sh  &amp;  <span class="token comment">#每10s在后台执行一次test.sh脚本</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>（3）ctrl + z</strong></p><p>可以将一个正在前台执行的命令放到后台，并且处于暂停状态。</p><p><strong>（4）jobs 查看后台运行的进程</strong></p><p>查看当前有多少在后台运行的命令 jobs -l选项可显示所有任务的PID，jobs的状态可以是running, stopped, Terminated。但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识。</p><p><strong>（5）fg</strong></p><p>将后台中的命令调至前台继续运行。如果后台中有多个命令，可以用fg %jobnumber（是命令编号，不是进程号）将选中的命令调出。</p><p><strong>（6）bg</strong></p><p>将一个在后台暂停的命令，变成在后台继续执行。如果后台中有多个命令，可以用bg %jobnumber将选中的命令调出。</p><p><strong>（7）kill 命令用于删除执行中的程序或工作。</strong></p><p>kill 可将指定的信息送至程序。预设的信息为 SIGTERM(15)，可将指定程序终止。 若仍无法终止该程序，可使用 SIGKILL(9) 信息尝试强制删除程序。 程序或工作的编号可利用 ps 指令或 jobs 指令查看。</p><p>kill除了可以终止进程，还能给进程发送其它信号，使用kill -l 可以察看kill支持的信号。 <img src="https://img-blog.csdnimg.cn/20210603102816109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY0NDMzNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 使用 kill -l 命令列出所有可用信号。</p><p>最常用的信号是：</p><ul><li>1 (HUP)：重新加载进程。</li><li>9 (KILL)：杀死一个进程。</li><li>15 (TERM)：正常停止一个进程。</li></ul><p><strong>实例</strong></p><p>杀死进程</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code> <span class="token function">kill</span> 12345\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>强制杀死进程</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code> <span class="token function">kill</span> <span class="token operator">-</span><span class="token function">KILL</span> 123456\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>发送SIGHUP信号，可以使用一下信号</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">kill</span> <span class="token operator">-</span>HUP pid\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>彻底杀死进程</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code> <span class="token function">kill</span> <span class="token operator">-</span>9 123456\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>显示信号</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code> <span class="token function">kill</span> <span class="token operator">-</span>l\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>1<span class="token punctuation">)</span> SIGHUP     2<span class="token punctuation">)</span> SIGINT     3<span class="token punctuation">)</span> SIGQUIT     4<span class="token punctuation">)</span> SIGILL     5<span class="token punctuation">)</span> SIGTRAP\n6<span class="token punctuation">)</span> SIGABRT     7<span class="token punctuation">)</span> SIGBUS     8<span class="token punctuation">)</span> SIGFPE     9<span class="token punctuation">)</span> SIGKILL    10<span class="token punctuation">)</span> SIGUSR1\n11<span class="token punctuation">)</span> SIGSEGV    12<span class="token punctuation">)</span> SIGUSR2    13<span class="token punctuation">)</span> SIGPIPE    14<span class="token punctuation">)</span> SIGALRM    15<span class="token punctuation">)</span> SIGTERM\n16<span class="token punctuation">)</span> SIGSTKFLT    17<span class="token punctuation">)</span> SIGCHLD    18<span class="token punctuation">)</span> SIGCONT    19<span class="token punctuation">)</span> SIGSTOP    20<span class="token punctuation">)</span> SIGTSTP\n21<span class="token punctuation">)</span> SIGTTIN    22<span class="token punctuation">)</span> SIGTTOU    23<span class="token punctuation">)</span> SIGURG    24<span class="token punctuation">)</span> SIGXCPU    25<span class="token punctuation">)</span> SIGXFSZ\n26<span class="token punctuation">)</span> SIGVTALRM    27<span class="token punctuation">)</span> SIGPROF    28<span class="token punctuation">)</span> SIGWINCH    29<span class="token punctuation">)</span> SIGIO    30<span class="token punctuation">)</span> SIGPWR\n31<span class="token punctuation">)</span> SIGSYS    34<span class="token punctuation">)</span> SIGRTMIN    35<span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span>1    36<span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span>2    37<span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span>3\n38<span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span>4    39<span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span>5    40<span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span>6    41<span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span>7    42<span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span>8\n43<span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span>9    44<span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span>10    45<span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span>11    46<span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span>12    47<span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span>13\n48<span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span>14    49<span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span>15    50<span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span>14    51<span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span>13    52<span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span>12\n53<span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span>11    54<span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span>10    55<span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span>9    56<span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span>8    57<span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span>7\n58<span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span>6    59<span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span>5    60<span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span>4    61<span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span>3    62<span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span>2\n63<span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span>1    64<span class="token punctuation">)</span> SIGRTMAX\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>杀死指定用户所有进程</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">kill</span> <span class="token operator">-</span>9 $<span class="token punctuation">(</span><span class="token function">ps</span> <span class="token operator">-</span>ef <span class="token punctuation">|</span> grep hnlinux<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>方法一 过滤出hnlinux用户进程 \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">kill</span> <span class="token operator">-</span>u hnlinux <span class="token operator">/</span><span class="token operator">/</span>方法二\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>终止进程：</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code>前台 ctrl <span class="token operator">+</span> c\n后台 fg <span class="token operator">+</span> ctrl <span class="token operator">+</span> c\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>（8）nohup</strong> 如果让程序始终在后台执行，即使关闭当前的终端也执行（之前的&amp;做不到），这时候需要nohup。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。关闭中断后，在另一个终端jobs已经无法看到后台跑得程序了，此时利用ps（进程查看命令）</p><div class="language-powershell ext-powershell line-numbers-mode"><pre class="language-powershell"><code><span class="token function">ps</span> <span class="token operator">-</span>aux <span class="token punctuation">|</span> grep <span class="token string">&quot;test.sh&quot;</span>  <span class="token comment">#a:显示所有程序 u:以用户为主的格式来显示 x:显示所有程序，不以终端机来区分</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>一次性计划任务 命令： at</p><p>持续更新中......................................</p>',94),S={},I=(0,a(3744).Z)(S,[["render",function(s,n){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[(0,e._)("a",l,[o,(0,e.Wm)(a)])]),r,(0,e._)("p",null,[t,(0,e._)("a",c,[i,(0,e.Wm)(a)]),u]),d,(0,e._)("p",null,[(0,e._)("a",b,[m,(0,e.Wm)(a)]),g,k,h]),w,(0,e._)("p",null,[(0,e._)("a",v,[x,(0,e.Wm)(a)])]),f,(0,e._)("p",null,[_,(0,e._)("a",F,[G,(0,e.Wm)(a)]),N]),$],64)}]])},3744:(s,n)=>{n.Z=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);